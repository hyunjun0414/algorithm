
//#include<stdio.h>
//int Fibonacci(int n)
//{
//	if (n == 1)
//		return 1;
//	else if (n == 2)
//		return 2;
//	else
//		return Fibonacci(n - 1) + Fibonacci(n - 2);
//}
//int main()
//{
//	int result = Fibonacci(5);
//	printf("%d", result);
//}




//#include<stdio.h>
//void Factorial(int n,int *presult)
//{
//	if (n == 1)
//	{
//		*presult = 1;
//	}
//	else
//	{
//		int n_1 = 0;
//		Factorial(n - 1, &n_1);
//		*presult = n_1 * n;
//	}
//}
//int main()
//{
//	int n = 5;
//	int result = 0;
//
//	Factorial(n, &result);
//	printf("합 : %d\n",result);
//}




//#include<stdio.h>
//int Factorial(int n)
//{
//	return (n == 1) ? 1: Factorial(n - 1) * n;
//}
//int main()
//{
//	int n = 5;
//	printf("합 : %d\n", Factorial(n));
//}





//#include<stdio.h>
//int Factorial(int n)
//{
//	int result = 1;
//	for (int i = n; i >= 1; --i)
//		result *= i;
//	return result;
//}
//int main()
//{
//	int n = 5;
//	printf("합 : %d\n", Factorial(n));
//}



//선형재귀
//#include<stdio.h>
//int Factorial(int n)
//{
//	if (n == 1)
//		return 1;
//	else
//		printf("%d * \n", n);
//		return Factorial(n - 1) * n;
//}
//int main()
//{
//	int n = 5;
//	printf("합 : %d\n", Factorial(n));
//}



//비선형 재귀
//#include<stdio.h>
//void Print(int n)
//{
//	printf("+print : %d\n", n);
//	if (n-1 >= 0)
//	{
//		Print(n - 1);
//	}
//	if (n - 2 >= 0)
//	{
//		Print(n - 2);
//	}
//	printf("-print : %d\n", n);
//}
//int main()
//{
//	Print(3);
//}




//#include<stdio.h>
//void Print(int n)
//{
//	printf("+print : %d\n", n);
//	if (n > 0)
//	{
//		Print(n - 1);
//		Print(n - 2);
//	}
//	printf("-print : %d\n", n);
//}
//int main()
//{
//	Print(3);
//}




//#include<stdio.h>
//void Print(int n)
//{
//	printf("+print : %d\n", n);
//	if (n > 0)
//	{
//		Print(n - 1);
//		Print(n - 1);
//	}
//	printf("-print : %d\n", n);
//}
//int main()
//{
//	Print(3);
//}



////재귀함수
//#include<stdio.h>
//void Print(int n)
//{
//	printf("print : %d\n", n);
//	if (n > 0)
//		Print(n + 1);
//}
//int main()
//{
//	Print(3);
//}




//#include<stdio.h>
//void f3(int n)
//{
//	printf("f3 : %d\n", n);
//}
//void f2(int n)
//{
//	printf("f2 : %d\n", n);
//	f3(30);
//	f3(30);
//}
//void f1(int n)
//{
//	printf("f1 : %d\n", n);
//	f2(20);
//	f2(20);
//}
//int main()
//{
//	f1(10);
//}


//이진검색

//#include<stdio.h>
//void PrintArray(int arr[], int size)
//{
//	for (int i = 0; i < size; ++i)
//		printf("%5d", arr[i]);
//	printf("\n");
//}
//int BinSearch(int list[], int size, int key)
//{
//	int left = 0;
//	int right = size - 1;
//
//	while (left <= right)
//	{
//		int middle = (left + right) / 2;
//		if (list[middle] < key)
//			left = middle + 1;
//		else if (list[middle] > key)
//			right = middle - 1;
//		else
//			return middle;
//	}
//	return -1;
//}
//int main()
//{
//	//int arr[8] = { 30,25,70,80,95,41,62,11 };
//	int arr[8] = { 11,25,30,41,62,70,80,95 };
//
//	PrintArray(arr, 8);
//	int idx = BinSearch(arr, 8, 41);
//	if (idx != -1)
//		printf("%d : %d\n", idx, arr[idx]);
//}




//#include<stdio.h>
//void PrintArray(int arr[], int size)
//{
//	for (int i = 0; i < size; ++i)
//		printf("%5d", arr[i]);
//	printf("\n");
//}
//int BinSearch(int list[], int size, int key)
//{
//	int left = 0;
//	int right = size - 1;
//
//	while (left <= right)
//	{
//		int middle = (left + right) / 2;
//		if (list[middle] < key)
//		{
//			left = middle + 1;
//			right = right;
//		}
//		else if (list[middle] > key)
//		{
//			left = left;
//			right = middle - 1;
//		}
//		else
//		{
//			return middle;
//		}
//		return -1;
//	}
//}
//int main()
//{
//	//int arr[8] = { 30,25,70,80,95,41,62,11 };
//	int arr[8] = { 11,25,30,41,62,70,80,95 };
//
//	PrintArray(arr, 8);
//	int idx = BinSearch(arr, 8, 41);
//	if (idx != -1)
//		printf("%d : %d\n", idx, arr[idx]);
//}




//#include<stdio.h>
//void PrintArray(int arr[], int size)
//{
//	for (int i = 0; i < size; ++i)
//		printf("%5d", arr[i]);
//		printf("\n");
//}
//int Search(int list[], int size, int key)
//{
//	for (int i = 0; i < size; ++i)
//		if (key == list[i])
//			return i;
//	return -1;
//}
//int main()
//{
//	int arr[8] = { 30,25,70,80,95,41,62,11 };
//
//	PrintArray(arr, 8);
//	int idx = Search(arr, 8, 41);
//	if (idx != -1)
//		printf("%d : %d\n", idx, arr[idx]);
//}
